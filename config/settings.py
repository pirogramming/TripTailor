"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")
FONT_AWESOME_KEY = os.getenv("FONT_AWESOME_KEY")
NAVER_CLIENT_ID = os.getenv("NAVER_CLIENT_ID")
NAVER_CLIENT_SECRET = os.getenv("NAVER_CLIENT_SECRET")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%#h%v23qd$@m_v2)hf3!xj$^eaz+*t$mwzps)2n*fo8ev)05^$'

SECRET_KEY = os.getenv("SECRET_KEY", "dev-only-insecure-key")
DEBUG = os.getenv("DEBUG", "False").lower() in ("1", "true", "yes")
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else []

# SECURITY WARNING: don't run with debug turned on in production!

AUTH_USER_MODEL = 'users.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'apps.users',
    'apps.reviews',
    'apps.places',
    'apps.routes',
    'apps.tags',

    #allauth 추가
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    #provider 추가 (추가로 다른 사이트도 하고 싶을 경우 뒤에 이름만 변경하면 됨)
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.naver',

    "pgvector.django",
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "apps.places.context_processors.public_settings",
                "apps.reviews.context_processors.fontawesome_key",
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
TEMPLATES[0]["OPTIONS"]["context_processors"] += [
    "apps.places.context_processors.public_settings",
]

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

db_engine = os.getenv("DB_ENGINE", "sqlite3").lower()

if db_engine in ("postgresql", "postgres", "psql", "postgresql_psycopg2"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME", "triptailor"),
            "USER": os.getenv("DB_USER", "triptailor_user"),
            "PASSWORD": os.getenv("DB_PASSWORD", "triptailor_pass"),
            "HOST": os.getenv("DB_HOST", "db"),
            "PORT": os.getenv("DB_PORT", "5432"),
            "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "60")),
        }
    }
else:
    # SQLite 폴백: DB_NAME이 비어있어도 안전하게 동작
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / os.getenv("DB_NAME", "db.sqlite3"),
        }
    }


# DATABASES = {
#     'default': {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("DB_NAME", "triptailor"),
#         "USER": os.getenv("DB_USER", "tripuser"),
#         "PASSWORD": os.getenv("DB_PASSWORD", ""),   # .env에 넣어둔 비번
#         "HOST": os.getenv("DB_HOST", "127.0.0.1"),  # 또는 내부/공인 IP
#         "PORT": os.getenv("DB_PORT", "5432"),
#         "CONN_MAX_AGE": 60,  # 커넥션 풀(초) — 운영에서 유용
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# 개발 환경에서 static 파일이 저장될 디렉토리
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # 예: BASE_DIR/static/ 에 정적 파일 보관
]

# 배포 환경에서 collectstatic으로 모을 위치
STATIC_ROOT = BASE_DIR / 'staticfiles'  # python manage.py collectstatic 시 사용

# Media files (업로드된 파일)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#로그인 관련 셋팅
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = True 
SOCIALACCOUNT_ADAPTER = 'apps.users.adapter.MySocialAccountAdapter'

# 이메일 로그인 관련 설정
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["username*", "email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True #이메일 중복 허용 불가

AUTHENTICATION_BACKENDS = (
    #추가 장고에서 사용자의 이름을 기준으로 로그인하도록 설정
    'django.contrib.auth.backends.ModelBackend',

    # 추가 'allauth'의 인증방식 추가
    'allauth.account.auth_backends.AuthenticationBackend',
)

#EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# === NAVER SMTP (애플리케이션 비밀번호 사용) ===
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.naver.com"

# 네이버: 465/SSL 또는 587/TLS 중 하나만 사용 가능
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False  # 둘 다 True 금지

# 반드시 전체 이메일 주소(@naver.com 포함)
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")            # 예: piro_triptailor@naver.com
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")    # ← 애플리케이션 비밀번호!
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
EMAIL_TIMEOUT = 10

# allauth 관련 (이메일 기반 로그인일 때 권장)
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

#추가
SOCIALACCOUNT_PROVIDERS ={
#추가 카카오 설정
"kakao": {
"APP": {
"client_id": config("KAKAO_CLIENT_ID"),
"secret": config("KAKAO_SECRET"),
"key": ""
},
# scope의 경우 내가 어떤 데이터를 가져올건지를 선택하는 것인데 사이트마다
# 제공하는 값이 다르기 때문에 가져올 데이터를 설정한 이후 추가/삭제 해보면 됩니다.
# SCOPE값에 제공하지 않는 값을 넣거나 하는 이유로 오류가 나올 수 있음
"SCOPE": [

],
#추가
"AUTH_PARAMS": {
"access_type": "online", #추가
'prompt': 'select_account', #추가 간편로그인을 지원해줌
}},
######################################################
#네이버 설정
"naver": {
"APP": {
"client_id": config("NAVER_CLIENT_ID"),
"secret": config("NAVER_SECRET"),
"key": ""
},
# scope의 경우 내가 어떤 데이터를 가져올건지를 선택하는 것인데 사이트마다
# 제공하는 값이 다르기 때문에 가져올 데이터를 설정한 이후 추가/삭제 해보면 됩니다.
# SCOPE값에 제공하지 않는 값을 넣거나 하는 이유로 오류가 나올 수 있음
"SCOPE": [

],
#추가
"AUTH_PARAMS": {
"access_type": "online",#추가
'prompt': 'select_account',#추가 간편로그인을 지원해줌
}},
######################################################
#구글 설정
"google": {
"APP": {
"client_id": config("GOOGLE_CLIENT_ID"),
"secret": config("GOOGLE_SECRET"),
"key": ""
},
# scope의 경우 내가 어떤 데이터를 가져올건지를 선택하는 것인데 사이트마다
# 제공하는 값이 다르기 때문에 가져올 데이터를 설정한 이후 추가/삭제 해보면 됩니다.
# SCOPE값에 제공하지 않는 값을 넣거나 하는 이유로 오류가 나올 수 있음
"SCOPE": [
    "profile", #구글의 경우 무조건 추가
    "email", # 구글의 경우 무조건 추가
],
#추가
"AUTH_PARAMS": {
"access_type": "online", #추가
'prompt': 'select_account',#추가 간편로그인을 지원해줌
}}}

